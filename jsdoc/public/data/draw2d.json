{
  "name": "draw2d",
  "namespace": "",
  "description": "<p>Primary package containing general interfaces and implementation classes.</p>",
  "access": "",
  "virtual": false,
  "classes": [
    {
      "name": "Canvas",
      "namespace": "draw2d",
      "description": "<p>A scrolling Canvas that contains Figures. Call <code>add(draw2d.Figure)</code> to add shapes to the Viewport.</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a new canvas with the given HTML DOM references.</p>",
          "parameters": [
            {
              "name": "canvasId",
              "type": "String",
              "description": "<p>the id of the DOM element to use a parent container</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "destroy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Call this method if you didn't need the canvas anymore. The method unregister all even handlers\nand frees all resources. The canvas is unusable after this call</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "clear",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Reset the canvas and delete all model elements.<br>\nYou can now reload another model to the canvas with a {@link draw2d.io.Reader}</p>",
          "parameters": [],
          "inherited": false,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "hideDecoration",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback for any kind of image export tools to trigger the canvas to hide all unwanted\ndecorations. The method is called e.g. from the draw2d.io.png.Writer</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "showDecoration",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>callback method for any image export writer to reactivate the decoration\nof the canvas. e.g. grids, rulers,...</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "calculateConnectionIntersection",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Calculate all connection intersection of the canvas.\nRequired for &quot;bridging&quot; or &quot;crossing decoration&quot;</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new selection and edit policy into the canvas</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.2.0",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the selection and edit policy from the canvas.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": [
                "draw2d.policy.EditPolicy",
                "String"
              ],
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.2.0",
          "examples": []
        },
        {
          "name": "setZoom",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new zoom factor for the canvas. The value must be between [0.01..10]</p>\n<pre><code>// you can register an eventhandler if the zoom factor did change\ncanvas.on(&quot;zoom&quot;, function(emitterFigure, zoomData){\n    alert(&quot;canvas zoomed to:&quot;+zoomData.value);\n});</code></pre>",
          "parameters": [
            {
              "name": "zoomFactor",
              "type": "Number",
              "description": "<p>new zoom factor. range [0.001..10]. 1.0 is no zoom.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "animated",
              "type": "Boolean",
              "description": "<p>set it to true for smooth zoom in/out</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getZoom",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current zoom factor of the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the dimension of the drawing area</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.4.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Tells the canvas to resize. If you do not specific any parameters\nthe canvas will attempt to determine the height and width by the enclosing bounding box\nof all elements and set the dimension accordingly. If you would like to set the dimension\nexplicitly pass in an draw2d.geo.Rectangle or an object with <b>height</b> and <b>width</b> properties.</p>",
          "parameters": [
            {
              "name": "dim",
              "type": "draw2d.geo.Rectangle",
              "description": "<p>the dimension to set or null for autodetect</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the height of the canvas if the first argument is a number and not a Rectangle</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.4.0",
          "examples": []
        },
        {
          "name": "fromDocumentToCanvasCoordinate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Transforms a document coordinate to canvas coordinate.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate relative to the window</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate relative to the window</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": "<p>The coordinate in relation to the canvas [0,0] position</p>"
          }
        },
        {
          "name": "fromCanvasToDocumentCoordinate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Transforms a canvas coordinate to document coordinate.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate in the canvas</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate in the canvas</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": "<p>the coordinate in relation to the document [0,0] position</p>"
          }
        },
        {
          "name": "getHtmlContainer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The DOM host of the canvas</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        {
          "name": "_getEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return a common event object independed if we run on an iPad or desktop.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "DOMEventObject",
            "description": ""
          }
        },
        {
          "name": "setScrollArea",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the area which are scrolling the canvas. This can be a jquery selector or\na jQuery node.</p>",
          "parameters": [
            {
              "name": "elementSelector",
              "type": "String/HTMLElement",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getScrollArea",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the scrolling area of the canvas. This is jQuery object</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "JQueryElement",
            "description": ""
          }
        },
        {
          "name": "getScrollLeft",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The left scroll position.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the left scroll offset of the canvas</p>"
          }
        },
        {
          "name": "getScrollTop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The top scroll position</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the top scroll offset of the cnavas.</p>"
          }
        },
        {
          "name": "setScrollLeft",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set left scroll position.</p>",
          "parameters": [
            {
              "name": "left",
              "type": "Number",
              "description": "<p>the left scroll offset of the canvas</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setScrollTop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>set top scroll position</p>",
          "parameters": [
            {
              "name": "top",
              "type": "Number",
              "description": "<p>the top scroll offset of the canvas.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "scrollTo",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>set the new scroll position of the canvas</p>",
          "parameters": [
            {
              "name": "top",
              "type": "Number",
              "description": "<p>the top scroll offset of the canvas.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "left",
              "type": "Number",
              "description": "<p>the left scroll offset of the canvas</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.8.0",
          "examples": []
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The absolute document x offset.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The absolute document y offset.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the width of the canvas</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the height of the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a figure at the given x/y coordinate. This method fires an event.</p>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;figure:add&quot;, function(emitter, event){\n   alert(&quot;figure added:&quot;);\n});\n\n// or more general if you want catch all figure related events\n//\ncanvas.on(&quot;figure&quot;, function(emitter, event){\n   // use event.figure.getCanvas()===null to determine if the\n   // figure part of the canvas\n\n   alert(&quot;figure added or removed:&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The figure to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number/draw2d.geo.Point",
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove a figure or connection from the Canvas. This method fires an event\nwhich can be catched.</p>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;figure:remove&quot;, function(emitter, event){\n   alert(&quot;figure removed:&quot;);\n});\n\n// or more general if you want catch all figure related events\n//\ncanvas.on(&quot;figure&quot;, function(emitter, event){\n   // use event.figure.getCanvas()===null to determine if the\n   // figure part of the canvas\n\n   alert(&quot;figure added or removed:&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The figure to remove</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getLines",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns all lines/connections in this workflow/canvas.<br></p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getFigures",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the internal figures.<br></p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getLine",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the line or connection with the given id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.basic.Line",
            "description": ""
          }
        },
        {
          "name": "getFigure",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the figure with the given id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "getIntersection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all intersections draw2d.geo.Point between the given line and all other\nlines in the canvas.</p>",
          "parameters": [
            {
              "name": "line",
              "type": "draw2d.shape.basic.Line",
              "description": "<p>the line for the intersection test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "snapToHelper",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Adjust the coordinate with the installed SnapToHelper.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The related figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "pos",
              "type": "draw2d.geo.Point",
              "description": "<p>The position to adjust</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": "<p>the adjusted position</p>"
          }
        },
        {
          "name": "registerPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Register a port to the canvas. This is required for other ports to find a valid drop target.</p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port which has been added to the Canvas.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "unregisterPort",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove a port from the internal cnavas registration. Now other ports can't find the\nport anymore as drop target. The port itself is still visible.</p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to unregister as potential drop target</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getAllPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports in the canvas</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>all ports from all figures</p>"
          }
        },
        {
          "name": "getCommandStack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the command stack for the Canvas. Required for undo/redo support.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.CommandStack",
            "description": ""
          }
        },
        {
          "name": "getPrimarySelection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the current selected figure in the Canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "getSelection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the current selection.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Selection",
            "description": ""
          }
        },
        {
          "name": "setCurrentSelection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the current selected figure or figures in the canvas.<br>\n<br>\nYou can hand over a draw2d.util.ArrayList since version 4.8.0 for multiple selection.</p>",
          "parameters": [
            {
              "name": "object",
              "type": [
                "draw2d.Figure",
                "draw2d.util.ArrayList"
              ],
              "description": "<p>The figure or list of figures to select.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "addSelection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the current figure to the selection. If a single selection policy is installed in the\ncanvas the selection before is reseted and the figure is the one and only selection.</p>",
          "parameters": [
            {
              "name": "object",
              "type": [
                "draw2d.Figure",
                "draw2d.util.ArrayList"
              ],
              "description": "<p>The figure(s) to add to the selection</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.6.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getBestFigure",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "blacklist",
              "type": [
                "draw2d.Figure",
                "Array",
                "Class"
              ],
              "description": "<p>The figures or class which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "whitelist",
              "type": [
                "draw2d.Figure",
                "Array",
                "Class"
              ],
              "description": "<p>The figures or class should be considered.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "getBestLine",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the line which match the hands over coordinate</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate for the hit test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the x-coordinate for the hit test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "lineToIgnore",
              "type": "draw2d.shape.basic.Line",
              "description": "<p>a possible line which should be ignored for the hit test</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.basic.Line",
            "description": ""
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations.<br>\nDroppable can be setup with:</p>\n<pre>\n   $(\".draw2d_droppable\").draggable({\n        appendTo:\"#container\",\n        stack:\"#container\",\n        zIndex: 27000,\n        helper:\"clone\",\n        start: function(e, ui){$(ui.helper).addClass(\"shadow\");}\n   });\n</pre>\n<p>Draw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
          "parameters": [
            {
              "name": "draggedDomNode",
              "type": "HTMLElement",
              "description": "<p>The DOM element which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrag",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object is moving around.<br>\n<br>\nDraw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
          "parameters": [
            {
              "name": "draggedDomNode",
              "type": "HTMLElement",
              "description": "<p>The dragged DOM element.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the drag</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the drag</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.<br>\n<br>\nGraphiti use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
          "parameters": [
            {
              "name": "draggedDomNode",
              "type": "HTMLElement",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop the droppedDomNode onto the canvas.<br>\n<br>\nDraw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
          "parameters": [
            {
              "name": "droppedDomNode",
              "type": "HTMLElement",
              "description": "<p>The dropped DOM element.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the double click event. The x/y coordinates are relative to the top left\ncorner of the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onRightMouseDown",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The user has triggered a right click. Redirect them to a responsible figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x-coordinate of the click</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y-coordinate of the click</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "onMouseWheel",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "wheelDelta",
              "type": "Number",
              "description": "<p>the delata of the wheel rotation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "fireEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the canvas for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the canvas.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>reset</li>\n  <li>select</li>\n</ul>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;clear&quot;, function(emitter, event){\n   alert(&quot;canvas.clear() called.&quot;);\n});\n\ncanvas.on(&quot;select&quot;, function(emitter,event){\n   alert(&quot;figure selected&quot;);\n});\n\ncanvas.on(&quot;unselect&quot;, function(emitter,event){\n   alert(&quot;figure unselected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Canvas",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The <code>off()</code> method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the canvas.<br>\n<br>\nIf a simple event name such as &quot;reset&quot; is provided, all events of that type are removed from the canvas.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Canvas",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "Connection",
      "namespace": "draw2d",
      "description": "<p>Connections figures are used to display a line between two points. The Connection interface extends\n{@link draw2d.shape.basic.PolyLine PolyLine}.<br>\nThe source and target endpoints of a connection are each defined using a {@link draw2d.layout.anchor.ConnectionAnchor ConnectionAnchor}.\nThese endpoints, along with any other points on the connection, are set by the connection's  {@link draw2d.layout.connection.ConnectionRouter ConnectionRouter}.\n<br>\nUsually every connection in a drawing has the same router instance. Connections with\ncommon endpoints can share anchor instances as well.</p>\n<h2>Connection Usage</h2>\n<p>Connections are created and added just like any other figure. Unlike normal figures, you must not set the\nbounds of a connection. Instead, you must provide the source and target port and let the connection router\ncalculate the connection's points. The connection then determines its own bounding box.<br>\n<br>\nA connection has a simple router by default - one that can connect the source and target anchors. But additional routers\nare available and can be set on the connection. Some routers can handle constraints for the connection. Note that when\nsetting a routing constraint on a connection, you must first set the router which will use that constraint.<br>\n<br></p>\n<p><b>TODO:<br></b>\n<i>\nA convenient way to share the router with all connections and to place connections above the drawing is to use a\nConnectionLayer. The layer has a connection router property which it shares with every child that's a connection.\nYou can update this property and easily change every connection's router at once.\n</i>\n<br>\n<br></p>\n<h2>Routing and Anchors</h2>\nA connection always has a router and it must set at least two ports on the connection: the source and target\nendpoints. By default, or when set to null, the connection's routing will be performed by an internal default router.\nThe ends are placed with the help of {@link draw2d.layout.anchor.ConnectionAnchor anchors}. An\n{@link draw2d.layout.anchor.ConnectionAnchor anchors} is a fixed or calculated location, usually associated with some\nfigure. For example, the {@link draw2d.layout.anchor.ChopboxConnectionAnchor ChopboxAnchor} finds the point at which a\nline going to the reference point intersects a box, such as the bounds of a figure. The reference point is either\nthe anchor at the opposite end, or a bendpoint or some other point nearest to the anchor.\n<br>\n{@img jsdoc_chopbox.gif ChopboxAnchor}\n<br>\nThe router calculates the endpoints and any other points in the middle of the connection. It then sets the points on the\nconnection by calling {@link draw2d.shape.basic.PolyLine#addPoint Polyline.addPoint}. The connection's existing point list\ncan be reused to reduce garbage, but the points must be set on the connection anyway so that it knows about any changes made.\n<br>\n<h2>Adding Decorations and Children to Connections</h2>\nLike most figures, Connection supports the addition of children. The children might be a label that\ndecorate the connection. The placement of each type of decoration can vary, so a {@link draw2d.layout.locator.ConnectionLocator ConnectionLocator}\nis used to delegate to each child's constraint object, a Locator. <br>\n<br>\n{@link draw2d.decoration.connection.Decorator Decorator} can be used to create and render a rotatable shape at\nthe end or start of a connection like arrows or boxes. Examples are {@link draw2d.decoration.connection.ArrowDecorator ArrowDecorator}, {@link draw2d.decoration.connection.BarDecorator BarDecorator} or {@link draw2d.decoration.connection.CircleDecorator CircleDecorator}\n<br>\n<h2>Connection Layout</h2>\nConnections extend the process of validation and layout to include routing. Since layout is the process of positioning children, routing must\ncome first. This allows a child's locator to operate on the connection's newly-routed points.<br>\nCheck out [Class System Guide](#!/guide/class_system) for additional reading.",
      "extends": [
        "draw2d.shape.basic.PolyLine"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "disconnect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "reconnect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can't drag&amp;drop the resize handles of a connector.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the Connection. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other fancy decorations :-)</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.ConnectionLocator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setSourceDecorator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the ConnectionDecorator for this object.</p>",
          "parameters": [
            {
              "name": "decorator",
              "type": "draw2d.decoration.connection.Decorator",
              "description": "<p>the new source decorator for the connection</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getSourceDecorator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current source ConnectionDecorator for this object.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>draw2d.decoration.connection.Decorator</p>"
          }
        },
        {
          "name": "setTargetDecorator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the ConnectionDecorator for this object.</p>",
          "parameters": [
            {
              "name": "decorator",
              "type": "draw2d.decoration.connection.Decorator",
              "description": "<p>the new target decorator for the connection</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getTargetDecorator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current target ConnectionDecorator for this object.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>draw2d.decoration.connection.Decorator</p>"
          }
        },
        {
          "name": "calculatePath",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Calculate the path of the polyline.</p>",
          "parameters": [
            {
              "name": "routingHints",
              "type": "Object",
              "description": "<p>some helper attributes for the router</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "routingHints.startMoved",
              "type": "Boolean",
              "description": "<p>is true if just the start location has moved</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "routingHints.destMoved",
              "type": "Boolean",
              "description": "<p>is true if the destination location has changed</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.\nDidn't provided by a connection. Return always '0'. This is required\nfor children position calculation. (e.g. Label decoration)</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.\nDidn't provided by a connection. Return always '0'. This is required\nfor children position calculation. (e.g. Label decoration)</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move this object behind of the 'figure'.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "getStartPoint",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return the recalculated position of the start point with the usage of\nthe installed connection anchor locator.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getEndPoint",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return the recalculated position of the start point with the usage of\nthe installed connection anchor locator.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSource",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new source port of this connection. This enforce a repaint of the connection.</p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new source port of this connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getSource",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the source port of this connection.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "setTarget",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the target port of this connection. This enforce a repaint of the connection.</p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new target port of this connection</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getTarget",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the target port of this connection.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "sharingPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Method returns true if the connection has at least one common draw2d.Port with the given connection.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "draw2d.Connection",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the canvas element of this figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getStartAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the angle of the connection at the output port (source)</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "fireSourcePortRouteEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "fireTargetPortRouteEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Sets the corner radius of the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "<p>the corner radius</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setStartPoint",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the start point of the line.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setEndPoint",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the end point of the line.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "addVertex",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Inserts the draw2d.geo.Point object into the vertex list of the polyline just after the object with the given index.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "insertVertexAt",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Inserts the draw2d.geo.Point object into the vertex list of the polyline just after the object with the given index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the insert index</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "removeVertexAt",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove a vertex from the polyline and return the removed point. The current installed connection router\ncan send an veto for this operation.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": "<p>the removed point or null of the current router decline this operation</p>"
          }
        },
        {
          "name": "setRouter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the router for this connection.</p>",
          "parameters": [
            {
              "name": "router",
              "type": "draw2d.layout.connection.ConnectionRouter",
              "description": "<p>the new router for this connection or null if the connection should use the default routing</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getRouter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current active router of this connection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>draw2d.layout.connection.ConnectionRouter</p>"
          }
        },
        {
          "name": "getSegments",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all line segments of the polyline.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "addPoint",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>used for the router to add the calculated points</p>",
          "parameters": [
            {
              "name": "p",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "getLength",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the length of the polyline.</p>",
          "parameters": [],
          "inherited": true,
          "since": "6.1.43",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "pointProjection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the projection of the point on the line.</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "lerp",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the point onto the line which has the relative 'percentage' position onto the line.</p>",
          "parameters": [
            {
              "name": "percentage",
              "type": "Number",
              "description": "<p>the relative position between [0..1]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "hitSegment",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>get the best segment of the line which is below the given coordinate or null if\nall segment are not below the coordinate. <br>\nThe 'corona' property of the polyline is considered for this test. This means\nthe point isn't direct on the line. Is it only close to the line!</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.4.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Checks if the hands over coordinate close to the line. The 'corona' property of the polyline\nis considered for this test. This means the point isn't direct on the line. Is it only close to the\nline!</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setOutlineColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the outline color of the line.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  outlineColor: color\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color/String",
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getOutlineColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The outline color of the text</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setOutlineStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the outline stroke of the line to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  outlineStroke: w\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new outline width of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getOutlineStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used outline line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;click&quot;, function(emitterFigure){\n    alert(&quot;clicked&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dasharray: dashPattern\n});</code></pre>",
          "parameters": [
            {
              "name": "dashPattern",
              "type": "String",
              "description": "<p>Can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dasharray&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  glow: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line width. This enforce a repaint of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  stroke: w\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCorona",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>click area for the line hit test.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  corona: w\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new click hit offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCorona",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used corona hitTest area.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the color of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  color: color\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current paint color.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": "<p>The paint color of the line.</p>"
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the line with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The new x translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The new y translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the bounding box of the line or polygon</p>\n<p>TODO: precalculate or cache this values</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.2",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setStartPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the start point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  startX: x,\n  startY: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the start point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setEndPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the end point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  endX: 3,\n  endY: 10\n});\n\n// or\nfigure.attr({\n  end: {x:3, y:10}\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or a draw2d.geo.Point of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the end point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStartX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the x coordinate of the start.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the y coordinate of the start.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the start point.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getEndX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the x coordinate of the end point</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the y coordinate of the end point.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the end point.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getVertex",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the Vertex with the given index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to return</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setVertex",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Update the vertex at the give position with the new coordinate</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to update</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "getVertices",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the vertices of the connection</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>an draw2d.util.ArrayList of type draw2d.Point</p>"
          }
        },
        {
          "name": "setVertices",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Update the vertices of the object. The given array is copied and assigned.</p>",
          "parameters": [
            {
              "name": "vertices",
              "type": [
                "draw2d.util.ArrayList",
                "Array"
              ],
              "description": "<p>the new vertices of the polyline.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.1",
          "examples": []
        },
        {
          "name": "getAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the angle of the line in degree.</p>\n<pre>\n                               270°\n                             |\n                             |\n                             |\n                             |\n180° -------------------------+------------------------> +X\n                             |                        0°\n                             |\n                             |\n                             |\n                             V +Y\n                            90°\n</pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "intersection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all intersection points between the given Line.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "draw2d.shape.basic.Line",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n   width:  w,\n   height: h\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Connection",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "Figure",
      "namespace": "draw2d",
      "description": "<p>Base class for all draw2d shapes-</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new Figure object</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "setter",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "getter",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": false,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": false,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": true,
          "deprecated": "",
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  glow: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": false,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": false,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": false,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n   width:  w,\n   height: h\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": false,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>all attributes of the figure required for the persistency</p>"
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Figure",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "HeadlessCanvas",
      "namespace": "draw2d",
      "description": "<p>Required for Node.js draw2d model read/write operations.</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a new canvas with the given HTML DOM references.</p>",
          "parameters": [
            {
              "name": "canvasId",
              "type": "String",
              "description": "<p>the id of the DOM element to use a parent container</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "clear",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Reset the canvas and delete all model elements.<br>\nYou can now reload another model to the canvas with a {@link draw2d.io.Reader}</p>",
          "parameters": [],
          "inherited": false,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "hideDecoration",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback for any kind of image export tools to trigger the canvas to hide all unwanted\ndecorations. The method is called e.g. from the draw2d.io.png.Writer</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "showDecoration",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>callback method for any image export writer to reactivate the decoration\nof the canvas. e.g. grids, rulers,...</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.0.0",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a figure at the given x/y coordinate. This method fires an event.</p>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;figure:add&quot;, function(emitter, event){\n   alert(&quot;figure added:&quot;);\n});\n\n// or more general if you want catch all figure related events\n//\ncanvas.on(&quot;figure&quot;, function(emitter, event){\n   // use event.figure.getCanvas()===null to determine if the\n   // figure part of the canvas\n\n   alert(&quot;figure added or removed:&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The figure to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number/draw2d.geo.Point",
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getLines",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns all lines/connections in this workflow/canvas.<br></p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getFigures",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the internal figures.<br></p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getLine",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the line or connection with the given id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.basic.Line",
            "description": ""
          }
        },
        {
          "name": "getFigure",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the figure with the given id.</p>",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "description": "<p>The id of the figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "registerPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Register a port to the canvas. This is required for other ports to find a valid drop target.</p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port which has been added to the Canvas.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getAllPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports in the canvas</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getCommandStack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the command stack for the Canvas. Required for undo/redo support.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.CommandStack",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the canvas for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the canvas.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>reset</li>\n  <li>select</li>\n</ul>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;clear&quot;, function(emitter, event){\n   alert(&quot;canvas.clear() called.&quot;);\n});\n\ncanvas.on(&quot;select&quot;, function(emitter,event){\n    if(event.figure!==null){\n        alert(&quot;figure selected&quot;);\n    }\n    else{\n        alert(&quot;selection cleared&quot;);\n    }\n});</code></pre>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Canvas",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the canvas.<br>\n<br>\nIf a simple event name such as &quot;reset&quot; is provided, all events of that type are removed from the canvas.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.0.0",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "HeadlessCanvas",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "HybridPort",
      "namespace": "draw2d",
      "description": "<p>A HybridPort can work as Input and as Output port in the same way for a {@link draw2d.Connection}.</p>",
      "extends": [
        "draw2d.Port"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a new HybridPort element</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>The requested operation to perform on the object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>The matching command to the requested operation.</p>"
          }
        },
        {
          "name": "setMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>set the maximal possible count of connections for this port.<br>\nThis method din't delete any connection if you reduce the number and a bunch of\nconnection are bounded already.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>the maximal number of connection related to this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the maximal possible connections (in+out) for this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [
            {
              "name": "group",
              "type": "String",
              "description": "<p>the semantic group of this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setConnectionAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the Anchor for this object. An anchor is responsible for the endpoint calculation\nof an connection. just visible representation.</p>",
          "parameters": [
            {
              "name": "anchor",
              "type": "draw2d.layout.anchor.ConnectionAnchor",
              "description": "<p>the new source anchor for the connection or &quot;null&quot; to use the default anchor.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>draw2d.geo.Rectangle.DIRECTION_UP</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_RIGHT</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_DOWN</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_LEFT</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "peerPort",
              "type": "draw2d.Port",
              "description": "<p>the counterpart port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the direction.</p>"
          }
        },
        {
          "name": "setConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>up -&gt; 0</li>\n  <li>right -&gt; 1</li>\n  <li>down -&gt; 2</li>\n  <li>left -&gt; 3</li>\n  <li>calculated -&gt; null</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "direction",
              "type": "Number",
              "description": "<p>the preferred connection direction.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.2.1",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.0",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set a value for the port. This is useful for interactive/dynamic diagrams like circuits, simulator,...</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>the new value for the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the user defined value of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a {@link draw2d.util.ArrayList} of {@link draw2d.Connection}s of all related connections to this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port. You can drop a port in the corona of this port to create\na connection. It is not necessary to drop exactly on the port.</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new corona width of the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onConnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port connected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been created</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "onDisconnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port disconnected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been deleted</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "getName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the name of this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the name of this port. The name of the port can be referenced by the lookup of\nports in the node.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The new name of this port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Hit test for ports. This method respect the corona diameter of the port for the hit test.\nThe corona width can be set with {@link draw2d.Port#setCoronaWidth}</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight this port</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicator if the figure should glow.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the diameter of the port. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called from the figure itself when any position changes happens. All listener\nwill be informed.\n<br>\nDON'T fire this event if the Port is during a Drag&amp;Drop operation. This can happen\nif we try to connect two ports</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>all attributes required for the persistency</p>"
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the diameter of the circle</p>"
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "r",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the radius of the circle</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the radius of the circle</p>"
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: dashPattern\n});</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "HybridPort",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "InputPort",
      "namespace": "draw2d",
      "description": "<p>A InputPort is the start anchor for a {@link draw2d.Connection}.</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a new InputPort element</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "InputPort",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "OutputPort",
      "namespace": "draw2d",
      "description": "<p>A OutputPort is the start anchor for a {@link draw2d.Connection}.</p>",
      "extends": [
        "draw2d.Port"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a new OutputPort element</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>set the maximal possible count of connections for this port.<br>\nThis method din't delete any connection if you reduce the number and a bunch of\nconnection are bounded already.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>the maximal number of connection related to this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the maximal possible connections (in+out) for this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [
            {
              "name": "group",
              "type": "String",
              "description": "<p>the semantic group of this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setConnectionAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the Anchor for this object. An anchor is responsible for the endpoint calculation\nof an connection. just visible representation.</p>",
          "parameters": [
            {
              "name": "anchor",
              "type": "draw2d.layout.anchor.ConnectionAnchor",
              "description": "<p>the new source anchor for the connection or &quot;null&quot; to use the default anchor.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>draw2d.geo.Rectangle.DIRECTION_UP</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_RIGHT</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_DOWN</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_LEFT</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "peerPort",
              "type": "draw2d.Port",
              "description": "<p>the counterpart port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the direction.</p>"
          }
        },
        {
          "name": "setConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>up -&gt; 0</li>\n  <li>right -&gt; 1</li>\n  <li>down -&gt; 2</li>\n  <li>left -&gt; 3</li>\n  <li>calculated -&gt; null</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "direction",
              "type": "Number",
              "description": "<p>the preferred connection direction.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.2.1",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.0",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set a value for the port. This is useful for interactive/dynamic diagrams like circuits, simulator,...</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>the new value for the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the user defined value of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a {@link draw2d.util.ArrayList} of {@link draw2d.Connection}s of all related connections to this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port. You can drop a port in the corona of this port to create\na connection. It is not necessary to drop exactly on the port.</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new corona width of the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onConnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port connected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been created</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "onDisconnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port disconnected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been deleted</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "getName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the name of this port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the name of this port. The name of the port can be referenced by the lookup of\nports in the node.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The new name of this port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Hit test for ports. This method respect the corona diameter of the port for the hit test.\nThe corona width can be set with {@link draw2d.Port#setCoronaWidth}</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight this port</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicator if the figure should glow.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the diameter of the port. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "fireEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called from the figure itself when any position changes happens. All listener\nwill be informed.\n<br>\nDON'T fire this event if the Port is during a Drag&amp;Drop operation. This can happen\nif we try to connect two ports</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>all attributes required for the persistency</p>"
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the diameter of the circle</p>"
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "r",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the radius of the circle</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the radius of the circle</p>"
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: dashPattern\n});</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "OutputPort",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "Port",
      "namespace": "draw2d",
      "description": "<p>A port is an object that is used to establish a connection between a node and a {@link draw2d.Connection}. The port can\nbe placed anywhere within a node ( see {@link draw2d.layout.locator.PortLocator} for details)</p>",
      "extends": [
        "draw2d.shape.basic.Circle"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "setMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>set the maximal possible count of connections for this port.<br>\nThis method din't delete any connection if you reduce the number and a bunch of\nconnection are bounded already.</p>",
          "parameters": [
            {
              "name": "count",
              "type": "Number",
              "description": "<p>the maximal number of connection related to this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getMaxFanOut",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the maximal possible connections (in+out) for this port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [
            {
              "name": "group",
              "type": "String",
              "description": "<p>the semantic group of this port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getSemanticGroup",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the semantic group of this port. Only ports in the same semantic group\ncan be connected.</p>\n<p>The default for all ports is &quot;global&quot;</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setConnectionAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the Anchor for this object. An anchor is responsible for the endpoint calculation\nof an connection. just visible representation.</p>",
          "parameters": [
            {
              "name": "anchor",
              "type": "draw2d.layout.anchor.ConnectionAnchor",
              "description": "<p>the new source anchor for the connection or &quot;null&quot; to use the default anchor.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>draw2d.geo.Rectangle.DIRECTION_UP</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_RIGHT</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_DOWN</li>\n  <li>draw2d.geo.Rectangle.DIRECTION_LEFT</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "peerPort",
              "type": "draw2d.Port",
              "description": "<p>the counterpart port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the direction.</p>"
          }
        },
        {
          "name": "setConnectionDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the <strong>direction</strong> for the connection in relation to the given port and it's parent.</p>\n<p>\nPossible values:\n<ul>\n  <li>up -&gt; 0</li>\n  <li>right -&gt; 1</li>\n  <li>down -&gt; 2</li>\n  <li>left -&gt; 3</li>\n  <li>calculated -&gt; null</li>\n</ul>\n<p>",
          "parameters": [
            {
              "name": "direction",
              "type": "Number",
              "description": "<p>the preferred connection direction.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "5.2.1",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getLocator",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the locator/layouter of the port. A locator is responsive for the x/y arrangement of the\nport in relation to the parent node.</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.2.0",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set a value for the port. This is useful for interactive/dynamic diagrams like circuits, simulator,...</p>",
          "parameters": [
            {
              "name": "value",
              "type": "Object",
              "description": "<p>the new value for the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getValue",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the user defined value of the port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a {@link draw2d.util.ArrayList} of {@link draw2d.Connection}s of all related connections to this port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCoronaWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the corona width of the Port. The corona width will be used during the\ndrag&amp;drop of a port. You can drop a port in the corona of this port to create\na connection. It is not necessary to drop exactly on the port.</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new corona width of the port</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onConnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port connected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been created</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "onDisconnect",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method if a new connection has created with this port</p>\n<pre><code>// Alternatively you register for this event with:\nport.on(&quot;connect&quot;, function(emitterPort, connection){\n    alert(&quot;port disconnected&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "connection",
              "type": "draw2d.Connection",
              "description": "<p>The connection which has been deleted</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.5.1",
          "examples": []
        },
        {
          "name": "getName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the name of this port.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setName",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the name of this port. The name of the port can be referenced by the lookup of\nports in the node.</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "description": "<p>The new name of this port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Hit test for ports. This method respect the corona diameter of the port for the hit test.\nThe corona width can be set with {@link draw2d.Port#setCoronaWidth}</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight this port</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicator if the figure should glow.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the diameter of the port. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "fireEvent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called from the figure itself when any position changes happens. All listener\nwill be informed.\n<br>\nDON'T fire this event if the Port is during a Drag&amp;Drop operation. This can happen\nif we try to connect two ports</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>all attributes required for the persistency</p>"
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "setter",
              "type": "Object",
              "description": "<p>add or replace setter methods</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "getter",
              "type": "Object",
              "description": "<p>add or replace getter methods</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the diameter of the circle</p>"
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "r",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the radius of the circle</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the radius of the circle</p>"
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: dashPattern\n});</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Port",
        "description": "",
        "parameters": [
          {
            "name": "attr",
            "type": "Object",
            "description": "<p>the configuration of the shape</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": []
      }
    },
    {
      "name": "Corona",
      "namespace": "draw2d",
      "description": "<p>Glow effect for ports. Just for internal use.</p>",
      "extends": [],
      "access": "private",
      "virtual": false,
      "functions": [],
      "fires": "",
      "constructor": {
        "name": "Corona",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "ResizeHandle",
      "namespace": "draw2d",
      "description": "<p>The Resizehandles for Figures.</p>\n<pre>\nPossible Type:\n\n  1             2               3\n   O-----------O-------------O\n   |                         |\n   |                         |\n  8 O           + 9           O 4\n   |                         |\n   |                         |\n   O-----------O-------------O\n  7             6               5\n</pre>",
      "extends": [
        "draw2d.shape.basic.Rectangle"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "the",
              "type": "draw2d.Figure",
              "description": "<p>owner if the resize handle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "type",
              "type": "Number",
              "description": "<p>the type of the ResizeHandle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getSnapToDirection",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The edge of the rectangle for the snapTo mechanism.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.SnapToHelper",
            "description": "<p>enum of the direction (NORTH, NORTH_WEST, EAST,...)</p>"
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getType",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "updateCursor",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>calculate and set the cursor of the reize handle</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Adjust the draggable flag of the resize handle and update the cursor of the shape in relation\nto the type of resize handle. north, south,west,..</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called if the drag and drop action beginns. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true whenever the drag drop operation is allowed.</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure is moved by user interaction.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the move x offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the move y offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called after a drag and drop action.<br></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.<br>\nThe ResizeHandle overrides the Figure.setPosition method. The base\nclass updates the resize handles during the update of the Dimension/Position. This\nis not neccessary for the ResizeHandles. Performance issue.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new dimension of the the ResizeHandle. If you didn't pass any width/height the best default for the\nplatform will be used.</p>\n<p>Additional the &quot;snapTo&quot; anchor is re-calculated in relation to the type of ResizeHandle</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>new width of the resize handle</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>new width of the resize handle</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures if we didn't use\nan overlayCanvas.</p>\n<p>If the ResizeHandle is place inside an overlayCanvas it is automatically on top.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color",
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return true if the element can be used in combination with the\nSnapToHelper feature.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Override this method and redirect them to the cavas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: pattern\n});</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "ResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "SVGFigure",
      "namespace": "draw2d",
      "description": "<p>Abstract class which can handle plain SVG content.</p>",
      "extends": [
        "draw2d.SetFigure"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getSVG",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setSVG",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the SVG of this shape</p>",
          "parameters": [
            {
              "name": "svg",
              "type": "String",
              "description": "<p>The new SVG to render as String</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional duration for the change of the SVG of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.SVGFigure",
            "description": ""
          }
        },
        {
          "name": "importSVG",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Helper method to transform the SVG string into a raphaelJS set.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set/Reset the canvas for the element.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class if the node.</p>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>propagate all attributes like color, stroke,... to the shape element and\nrepaint them.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "applyAlpha",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Apply the opacity to all child set elements. Override this if you want to avoid opacity changes.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Override this method to add your own SVG elements. See {@link draw2d.shape.basic.Label} as example.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: pattern\n});</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "SVGFigure",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "Selection",
      "namespace": "draw2d",
      "description": "<p>Represents the current selection in the canvas. The selection element is a pure passive element which\nmanage/store the selection.</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "clear",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Reset the current selection</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getPrimary",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the primary selection. This can only one figure at once.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the primary selected figure</p>"
          }
        },
        {
          "name": "setPrimary",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the primary selection.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The new primary selection</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given figure from the selection (primary,all)</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "add",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a figure to the selection. No events are fired or update the selection handle. This method just\nadd the figure to the internal management data structure.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return true if the given figure part of the selection.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>The figure to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "checkDescendant",
              "type": "Boolean",
              "description": "<p>Check if the figure provided by the argument is a descendant of the selection whether it is a direct child or nested more deeply.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.2.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSize",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the size of the selection</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getAll",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the complete selection - including the primary selection.</p>",
          "parameters": [
            {
              "name": "expand",
              "type": "Boolean",
              "description": "<p>expand all StrongComposite and WeakComposite to get all figures. Didn't expand any SetFigures or LayoutFigures</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "each",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Iterates over the current selection with <b>func</b> as callback handler.</p>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>the callback function to call for each element</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.i",
              "type": "Number",
              "description": "<p>index of the element in iteration</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.value",
              "type": "Object",
              "description": "<p>value of the element in iteration.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "reverse",
              "type": "Boolean",
              "description": "<p>optional parameter. Iterate the collection reverse if it set to <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Selection",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "SetFigure",
      "namespace": "draw2d",
      "description": "<p>A SetFigure is a composition of different SVG elements.</p>",
      "extends": [
        "draw2d.shape.basic.Rectangle"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set/Reset the canvas for the element.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class if the node.</p>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>propagate all attributes like color, stroke,... to the shape element and\nrepaint them.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "applyAlpha",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Apply the opacity to all child set elements. Override this if you want to avoid opacity changes.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Override this method to add your own SVG elements. See {@link draw2d.shape.basic.Label} as example.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: pattern\n});</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "SetFigure",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "VectorFigure",
      "namespace": "draw2d",
      "description": "<p>The base class for all vector based figures like {@link draw2d.shape.basic.Rectangle}  or {@link draw2d.shape.basic.Oval}\ninside a canvas.</p>",
      "extends": [
        "draw2d.shape.node.Node"
      ],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "4.2.1",
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "inherited": false,
          "since": "4.2.1",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  dash: dashPattern\n});</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line style for this object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current used background color.</p>\n<pre><code>// Alternatively you can use the attr method:\nvar color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke to use.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;stroke&quot;: 2\n});</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;color&quot;: &quot;#f3f3f3&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.4",
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element so it is the closest to the viewer’s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "3.0.0",
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.7.2",
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  visible: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<p>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value</p>\n<p>// multiple attributes:\nfigure.attr({\nx: 30,\ny: 40,\nwidth : 200,\nheight: 50,\ncssClass: &quot;red_border_figure&quot;\n});</p>\n<p>// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\nonClick : function(){\nalert(&quot;click&quot;);\n}\n});</p>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<p>// setting multiple attributes:\nfigure.attr({\n&quot;userData.my.property.x&quot;: 30,\n&quot;userData.my.property.y&quot;: 40\n});</p>\n<p>Also set using array notation is possible for the userData:</p>\n<p>// dot notation and array brackets:\nfigure.attr({\n&quot;userData.my.names[0]&quot;: &quot;John&quot;,\n&quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});</p>\n<p>The Object returned should be the equivalent structured object:</p>\n<p>let obj = figure.getUserData();</p>\n<p>That is, where obj is equivalent to:</p>\n<p>let obj = {\nmy:{\nproperty:{\nx: 30,\ny: 40\n},\nnames:  [&quot;John&quot;, &quot;Doe&quot;]\n}\n};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.1",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>either the requested attribute if this method used as getter or <code>this</code> if the method uses as setter</p>"
          }
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.5.6",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  userData: object\n});</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.7.2",
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.7.2",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the id of this element.</p>\n<p>// Alternatively you can use the attr method:\nfigure.attr({\nid: newId\n});</p>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the css class of the node.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;cssClass&quot;: &quot;red_border_figure&quot;\n});</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "2.9.0",
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code>// Alternatively you can register for this event with\nfigure.on(&quot;timer&quot;, function(emitter){\n    alert(&quot;timer fired&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.81",
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<p>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());</p>\n<p>canvas.add( start);</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": true,
          "deprecated": "",
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.6.0",
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panning&quot;, function(emitter, eventData){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;panningEnd&quot;, function(emitter){\n    alert(&quot;panning of the figure called&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "6.1.0",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code>// Alternatively you can register an event with:\n//\nfigure.on(&quot;dblclick&quot;, function(emitter, event){\n    alert(&quot;user dbl click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code>// You can alternatively register an event handler with:\nfigure.on(&quot;click&quot;, function(emitter, event){\n    alert(&quot;user click on the figure&quot;);\n});</code></pre>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code>// Alternatively you register for this event with:\nfigure.on(&quot;contextmenu&quot;, function(emitter, event){\n    alert(&quot;user press the right mouse button for a context menu&quot;);\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "1.1.0",
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  &quot;alpha&quot;: percent\n});\n\n// ...or:\nfigure.attr({\n  &quot;opacity&quot;: percent\n});</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "inherited": true,
          "since": "1.1.0",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.1.0",
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.1.0",
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.8",
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the position of the object.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  x: x,\n  y: y\n});</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "inherited": true,
          "since": "2.0.0",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  width: w,\n  height: h,\n  x: x,\n  y: y\n});\n\n// or\nfigure.attr({\n  boundingBox: {x:1, y:100, width:30, height:30}\n});</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getOuterBoundingBox",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas. All child shapes included.\nThe result BoundingBox spans the parent figured plus all children.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  resizeable: flag\n});</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "deprecated": true,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.5.4",
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "inherited": true,
          "since": "5.0.6",
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "4.8.0",
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "inherited": true,
          "since": "4.8.0",
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "5.0.0",
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "inherited": true,
          "since": "",
          "examples": []
        }
      ],
      "fires": "",
      "constructor": {
        "name": "VectorFigure",
        "description": "",
        "parameters": [],
        "examples": []
      }
    }
  ],
  "namespaces": [
    {
      "name": "geo",
      "namespace": "draw2d"
    },
    {
      "name": "io",
      "namespace": "draw2d"
    },
    {
      "name": "util",
      "namespace": "draw2d"
    },
    {
      "name": "policy",
      "namespace": "draw2d"
    },
    {
      "name": "shape",
      "namespace": "draw2d"
    },
    {
      "name": "command",
      "namespace": "draw2d"
    },
    {
      "name": "decoration",
      "namespace": "draw2d"
    },
    {
      "name": "layout",
      "namespace": "draw2d"
    },
    {
      "name": "ui",
      "namespace": "draw2d"
    }
  ]
}